








Home 
    export {home}
    
    home = (() => {
        function loadpage{
            create and add html elements to DOM
        }
        return {loadpage};
    })()

recipe object structure:
    name: recipename
    prepTime: preperation prepTime
    cookTime: cooking time
    ingredients: [ingredient1, ingredient2...]
    cooking steps: [step1,step2...]
    img: 'url'

generate Dish
    export generateDish (modular pattern)

    show random dish:
        get data from object array preferably through a function
            function 
                if (document.queryselector('.recipe-card').innerHTML)
                    const findCurrentDish = (object) => object.name === document.querySelector('.card-info h1').innerText
                    let removedDish =array.splice(array.findIndex(findCurrentDish),1)
                    let dish = array[Math.floor(math.random()*array.length)]
                    array.push(removedDish);
                let dish = array[Math.floor(math.random()*array.length)];
                return dish;

        function for adding html elements to the dom with the correct values
            creating the html elements as a string
                function (dish)
                    let ingredientsString = '';
                    for (let ingredient of dish.Ingredients)
                        ingredientsString += '<li>${ingredient}</li>' 
                    let htmlstring = `
                        <div class="card-header">
                            <div class="img" id="card-img"></div>
                            <div class="card-info">
                                <h1>${dish.name}</h1>
                                <p>prep Time: ${dish.prepTime}</p>
                                <p>cooking Time: ${dish.cookTime}</p>
                            </div>
                        </div>
                        <div class="Ingredients">
                            <h1>
                                Ingredients:
                            </h1>
                            <ul>
                                ${ingredientsString}
                            </ul>
                        </div>`
                    return htmlString;

            function for adding the html elements to the DOM 
                function (htmlstring)
                    document.querySelector('.recipe-card).innerHTML = htmlString;

    

All Dishes  
    export  allDishes(modular pattern)

    do on loadPage: show all dishes with pictures on cards
        get dishArray
        create html elements as a string
        loop through array and add html tags corresponding to the dish as a string to html string
        add htmlstring to innerHTML of DOM element 

    click on recipe to show recipe card 
        add event handler to every recipe block 
        add recipe card to DOM 
            get the corresponding dish object (maybe through comparing target name and object name, maybe with data-attribute)
                function (e,dishArray)
                    let dishIndex = dishArray.findIndex((object)=>{e.target.children.innerText === object.name})
                    return dishArray[dishIndex];

            create htmlstring with object data 
                function (dish)
                        let ingredientsString = '';
                        for (let ingredient of dish.Ingredients) {
                            ingredientsString += `<li>${ingredient}</li>`;
                        }
                        let stepsString = '';
                        for (let step of dish.Steps) {
                            stepsString += `<li>${step}</li>`;
                        }
                        let htmlString = `
                        <div class="card-header">
                            <div class="img" id="card-img" style="background-image:url(${dish.img});"></div>
                            <div class="card-info">
                            <h1>${dish.name}</h1>
                            <p>prep Time: ${dish.prepTime}</p>
                            <p>cooking Time: ${dish.cookTime}</p>
                            </div>
                        </div>
                        <div class="Ingredients">
                            <h1>
                                Ingredients:
                            </h1>
                            <ul>
                                ${ingredientsString}
                            </ul>
                        </div>
                        <div class="Steps">
                            <h1>
                                Steps:
                            </h1>
                            <ul>
                                ${stepsString}
                            </ul>
                        </div>`;
                        return htmlString;
                    
            create Element and add html string as innerText and append Element or just add html string as innertext to existing DOM
                function (htmlString,dishArray) 
                    let element = document.createElement('div')
                    element.class = "recipeBackground"
                    element.id = "allDishesCard"
                    element.innerText = htmlString;

        close recipe card when clicking next to it
            remove recipeBackground div from main div
                function
                    document.querySelector('.main').removeChild(document.querySelector('.recipeBackground'));
            add the function to background and remove it for the duration, the mouse hovers over the card
                addeventlistener to background with remove function
                add eventlistener to card with mouseover event that removes the listener from background 
                add eventlistener to card with mouseleave event that adds the listener back to background     

    remove dish from tab and from dishArray on recipe remove button
        get object corresponding to pressed recipe
        remove object from dishArray
        save dishArray again to localstorage
        reload all Dishes tab



Add Dishes
    export 

    Add a dish to the dishArray via user input
        form popup on buttonclick
        form closes when submitting
            calls resetformvalues function
            supressDefaultBehaviour: event.preventDefault()
        form validation

        fetch entered data from form input fields after validation
            function new FormData 
        
        generte new input field on button click
            function createElement and appendchild
                create input element
                add attributes type, name (ingredient + divingredients.children.length-1), placeholder="Ingredient divingredients.children.length-1"  
                append to divingredients

        add generate new inputfield on button click to corresponding button

        generate Object with form values



save array with objects to localstorage  



